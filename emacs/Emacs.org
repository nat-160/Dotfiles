#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* About

Literate config for Emacs. Goals:
- Maintain readability
- Commented code
- Add elements based on need

** TODO Migrate from old config
** TODO LSP
** TODO standardize indentation
** DONE No littering

* Default Settings

Any default in Emacs to be changed

** Behaviours

#+begin_src emacs-lisp
  (setq inhibit-splash-screen t	;; Disable welcome screen
        ring-bell-function 'ignore  ;; Disable error bell
        display-line-numbers-type t) ;; Static line number spacing

  (setq-default indent-tabs-mode nil) ;; Disable tabs globally

  ;; Delete spaces at line ends when saving
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Disable the startup message
  (defun nat/startup-message () (message ""))
  (add-hook 'emacs-startup-hook 'nat/startup-message)

  ;; Line numbers when coding
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; CLISP indentation
  (setq lisp-indent-function 'common-lisp-indent-function)

  ;; Scratch buffer message
  (setq initial-scratch-message "(ðŸ„´ðŸ„¼ðŸ„°ðŸ„²ðŸ…‚)")
  (defun ðŸ„´ðŸ„¼ðŸ„°ðŸ„²ðŸ…‚ () (find-file "~/Dotfiles/emacs/Emacs.org"))
#+end_src

** GUI Elements

#+begin_src emacs-lisp
  (tooltip-mode -1)    ;; Disable GUI hover
  (tool-bar-mode -1)   ;; Disable the bar with icons
  (menu-bar-mode -1)   ;; Disable the bar with text
  (scroll-bar-mode -1) ;; Disable scroll bars
  (set-fringe-mode 16) ;; Space between window and frame
#+end_src

* Package Management

Set up package repositories and initialize use-package.

** Add Repositories

Load the package library and add archives, then activate manager.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  ;; Initialize sources for the first time
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Use-Package

Install/Load use-package, a better manager for packages

#+begin_src emacs-lisp
  ;; Install if not detected
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  ;; Automatically install packages when loading
  (setq use-package-always-ensure t)
#+end_src

* File Options
** No Littering

Makes emacs keep all automatically generated files in one place

#+begin_src emacs-lisp
  (use-package no-littering
    :custom
    (auto-save-file-name-transforms `((".*",(no-littering-expand-var-file-name "auto-save/") t)) "Change location for auto-saved files"))
#+end_src
* Fonts

** Faces

Set the 3 main faces

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 1.0)
  (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height 1.0)
#+end_src

** Mixed-Pitch

Set which org faces should use monospace in variable pitch mode

#+begin_src emacs-lisp
  (defun nat/org-set-faces ()

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Source Sans Pro" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (dolist (face '(line-number
                    line-number-current-line
                    org-block
                    org-block-begin-line
                    org-block-end-line
                    org-code
                    org-checkbox
                    org-document-info-keyword
                    org-formula
                    org-meta-line
                    org-special-keyword
                    org-table
                    org-verbatim))
      (set-face-attribute face nil :inherit 'fixed-pitch)))
#+end_src

* Org Mode

Org-Mode is important!

** Libraries
#+begin_src emacs-lisp
  (require 'ox) ;; For exporting
  (require 'org-tempo) ;; For templates
#+end_src

** Basics

#+begin_src emacs-lisp
  (defun nat/org-mode-setup()
    (org-indent-mode)    ;; Visually indent
    (visual-line-mode 1) ;; Cursor follows word wrap
    (variable-pitch-mode 1)
    (nat/org-set-faces))

  (use-package org
    :custom
    (org-ellipsis " â–¾" "Minimized header indicator")
    (org-src-fontify-natively t "Mixed fonts")
    (org-src-tab-acts-natively t "Indent code blocks")
    (org-hide-emphasis-markers t "Hide markdown symbols")
    :hook
    (org-mode . nat/org-mode-setup))
#+end_src

** Babel

Babel is used for code blocks in org mode

*** Languages

Configure languages babel can use

#+begin_src emacs-lisp
  ;; Add list of babel languages
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)))
  ;; Add conf-unix-mode manually
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

*** Tangle

Automatically export (tangle) Elisp from this file to =init.el=

#+begin_src emacs-lisp
  ;; Export function
  (defun nat/tangle-config ()
    (when
        (string-equal
         (buffer-file-name)
         (expand-file-name "~/Dotfiles/emacs/Emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  ;; Execute when saving Org
  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook 'nat/tangle-config)))
#+end_src

*** Structure Templates

Add additional structure templates, =<el= + =TAB= inserts an elisp block

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("ps" . "src powershell"))
#+end_src

** Superstar

You are my superstar :D
Configure org bullet points

#+begin_src emacs-lisp
  (use-package org-superstar
    :hook
    (org-mode . org-superstar-mode))
#+end_src

* Theme
** Modus Vivendi

Load Modus Vivendi, the dark high contrast theme

#+begin_src emacs-lisp
  (use-package modus-themes
    :init ;; Customize before load
    ;;(modus-themes-load-themes) ;;old
    :config
    (load-theme 'modus-vivendi t))
#+end_src
* Languages
** TODO Powershell

#+begin_src emacs-lisp
  (use-package powershell
    :custom
    (powershell-indent 2 "Spacing after line")
    )
#+end_src
** TODO Python

#+begin_src emacs-lisp
  (setq python-shell-interpreter "python3")
#+end_src
* LSP
** TODO Basics

[[https://emacs-lsp.github.io/lsp-mode/page/installation/][site]]

#+begin_src emacs-lisp
  (use-package lsp-mode
    :custom
    (lsp-keymap-prefix "C-c l")
    :hook
    (powershell-mode . lsp)
    (python-mode . lsp)
    (java-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration))
#+end_src

** TODO LSP Pyright
#+begin_src emacs-lisp
  (use-package lsp-pyright
      :after lsp-mode)
#+end_src

** TODO LSP Java
#+begin_src emacs-lisp
  (use-package lsp-java
      :after lsp-mode)
#+end_src
* Unsorted Packages
** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :custom
    (which-key-idle-delay 3.0))
#+end_src
** Rainbow-Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay (lambda()(if(company-in-string-or-comment) nil 0.0)))
    :hook
    (lsp-mode . company-mode))
#+end_src
** Markdown-Mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :custom
    (markdown-fontify-code-blocks-natively t "Syntax highlighting")
    :config
    (push '("powershell" . powershell-mode) markdown-code-lang-modes)
    (push '("pwsh" . powershell-mode) markdown-code-lang-modes))
#+end_src
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src
** Slime
#+begin_src emacs-lisp
  (use-package slime
               :custom
               (inferior-lisp-program "clisp -q"))
#+end_src
